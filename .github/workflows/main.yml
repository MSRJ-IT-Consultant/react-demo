name: GitHub Actions for Frontend with GCP Deployment

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  PROJECT_ID: production-469102
  REGION: asia-southeast1
  SERVICE_NAME: react-demo-app
  REPOSITORY: sb-repository
  CUSTOM_DOMAIN: apps.muhammad-syamsurrijal.my.id
  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout source code
      - name: Checkout code
        uses: actions/checkout@v4  

      # Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Set up Docker cache 
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Install dependencies and run tests
      - name: Install Dependencies and run tests
        run: |
          npm install
          npm audit --production --json | tee audit-results.json

      # Run Snyk Security scan on dependencies
      - name: Run Snyk to check for vulnerabilities
        id: snyk_scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true
        with:
          args: --json-file-output=snyk-results.json

      # Process Snyk results
      - name: Process Snyk Results
        id: process_snyk
        run: |
          if [ -f "snyk-results.json" ]; then
            # Count vulnerabilities by severity
            CRITICAL=$(jq '[.vulnerabilities[] | select(.severity == "critical")] | length' snyk-results.json 2>/dev/null || echo "0")
            HIGH=$(jq '[.vulnerabilities[] | select(.severity == "high")] | length' snyk-results.json 2>/dev/null || echo "0")
            MEDIUM=$(jq '[.vulnerabilities[] | select(.severity == "medium")] | length' snyk-results.json 2>/dev/null || echo "0")
            LOW=$(jq '[.vulnerabilities[] | select(.severity == "low")] | length' snyk-results.json 2>/dev/null || echo "0")
            
            echo "SNYK_CRITICAL=$CRITICAL" >> $GITHUB_ENV
            echo "SNYK_HIGH=$HIGH" >> $GITHUB_ENV
            echo "SNYK_MEDIUM=$MEDIUM" >> $GITHUB_ENV
            echo "SNYK_LOW=$LOW" >> $GITHUB_ENV
            echo "SNYK_TOTAL=$((CRITICAL + HIGH + MEDIUM + LOW))" >> $GITHUB_ENV
            
            if [ $CRITICAL -gt 0 ] || [ $HIGH -gt 0 ]; then
              echo "SNYK_STATUS=❌ Found Critical/High vulnerabilities" >> $GITHUB_ENV
              echo "SNYK_FAILED=true" >> $GITHUB_ENV
            elif [ $MEDIUM -gt 0 ] || [ $LOW -gt 0 ]; then
              echo "SNYK_STATUS=⚠️ Found Medium/Low vulnerabilities" >> $GITHUB_ENV
              echo "SNYK_FAILED=false" >> $GITHUB_ENV
            else
              echo "SNYK_STATUS=✅ No vulnerabilities found" >> $GITHUB_ENV
              echo "SNYK_FAILED=false" >> $GITHUB_ENV
            fi
          else
            echo "SNYK_STATUS=❓ Scan results not available" >> $GITHUB_ENV
            echo "SNYK_TOTAL=0" >> $GITHUB_ENV
            echo "SNYK_CRITICAL=0" >> $GITHUB_ENV
            echo "SNYK_HIGH=0" >> $GITHUB_ENV
            echo "SNYK_MEDIUM=0" >> $GITHUB_ENV
            echo "SNYK_LOW=0" >> $GITHUB_ENV
            echo "SNYK_FAILED=false" >> $GITHUB_ENV
          fi

      # Check Snyk results and fail if Critical/High vulnerabilities found
      - name: Check Snyk Security Gate
        run: |
          if [ "${{ env.SNYK_FAILED }}" == "true" ]; then
            echo "🚨 SECURITY GATE FAILED: Snyk found Critical/High vulnerabilities!"
            echo "Critical: ${{ env.SNYK_CRITICAL }}, High: ${{ env.SNYK_HIGH }}"
            echo "Pipeline stopped due to security vulnerabilities."
            exit 1
          else
            echo "✅ Snyk Security Gate PASSED"
          fi

      # Generate commit SHA for Docker image tag
      - name: Generate Commit SHA for Image Tag
        id: set_image_tag
        run: |
          IMAGE_TAG="${{ github.sha }}"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "Generated IMAGE_TAG: $IMAGE_TAG"

      # Build Docker image with commit SHA as tag
      - name: Build Docker image
        run: |
            IMAGE_TAG="${{ github.sha }}"
            echo "Building Docker image with tag: $IMAGE_TAG"  
            docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:$IMAGE_TAG .

      # Run Trivy Security scan on Docker image (updated version)
      - name: Scan Docker image with Trivy for vulnerabilities
        id: trivy_scan
        uses: aquasecurity/trivy-action@0.28.0 
        with:
            image-ref: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }}
            format: 'json'  
            exit-code: '0'
            ignore-unfixed: false
            vuln-type: 'os,library'
            severity: 'CRITICAL,HIGH'
            output: 'trivy-results.json'

      # Process Trivy results
      - name: Process Trivy Results
        id: process_trivy
        run: |
          if [ -f "trivy-results.json" ]; then
            # Count vulnerabilities by severity from Trivy results
            CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-results.json 2>/dev/null || echo "0")
            HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-results.json 2>/dev/null || echo "0")
            MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' trivy-results.json 2>/dev/null || echo "0")
            LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW")] | length' trivy-results.json 2>/dev/null || echo "0")
            
            echo "TRIVY_CRITICAL=$CRITICAL" >> $GITHUB_ENV
            echo "TRIVY_HIGH=$HIGH" >> $GITHUB_ENV
            echo "TRIVY_MEDIUM=$MEDIUM" >> $GITHUB_ENV
            echo "TRIVY_LOW=$LOW" >> $GITHUB_ENV
            echo "TRIVY_TOTAL=$((CRITICAL + HIGH + MEDIUM + LOW))" >> $GITHUB_ENV
            
            if [ $CRITICAL -gt 0 ] || [ $HIGH -gt 0 ]; then
              echo "TRIVY_STATUS=❌ Found Critical/High vulnerabilities" >> $GITHUB_ENV
              echo "TRIVY_FAILED=true" >> $GITHUB_ENV
            elif [ $MEDIUM -gt 0 ] || [ $LOW -gt 0 ]; then
              echo "TRIVY_STATUS=⚠️ Found Medium/Low vulnerabilities" >> $GITHUB_ENV
              echo "TRIVY_FAILED=false" >> $GITHUB_ENV
            else
              echo "TRIVY_STATUS=✅ No vulnerabilities found" >> $GITHUB_ENV
              echo "TRIVY_FAILED=false" >> $GITHUB_ENV
            fi
          else
            echo "TRIVY_STATUS=❓ Scan results not available" >> $GITHUB_ENV
            echo "TRIVY_TOTAL=0" >> $GITHUB_ENV
            echo "TRIVY_CRITICAL=0" >> $GITHUB_ENV
            echo "TRIVY_HIGH=0" >> $GITHUB_ENV
            echo "TRIVY_MEDIUM=0" >> $GITHUB_ENV
            echo "TRIVY_LOW=0" >> $GITHUB_ENV
            echo "TRIVY_FAILED=false" >> $GITHUB_ENV
          fi

      # Check Trivy results and fail if Critical/High vulnerabilities found
      - name: Check Trivy Security Gate
        run: |
          if [ "${{ env.TRIVY_FAILED }}" == "true" ]; then
            echo "🚨 SECURITY GATE FAILED: Trivy found Critical/High vulnerabilities!"
            echo "Critical: ${{ env.TRIVY_CRITICAL }}, High: ${{ env.TRIVY_HIGH }}"
            echo "Pipeline stopped due to security vulnerabilities."
            exit 1
          else
            echo "✅ Trivy Security Gate PASSED"
          fi

      # Combined Security Gate Check
      - name: Final Security Gate Check
        run: |
          TOTAL_CRITICAL=$((${SNYK_CRITICAL:-0} + ${TRIVY_CRITICAL:-0}))
          TOTAL_HIGH=$((${SNYK_HIGH:-0} + ${TRIVY_HIGH:-0}))
          
          echo "=== SECURITY GATE SUMMARY ==="
          echo "Total Critical Vulnerabilities: $TOTAL_CRITICAL"
          echo "Total High Vulnerabilities: $TOTAL_HIGH"
          echo "Snyk Status: ${{ env.SNYK_STATUS }}"
          echo "Trivy Status: ${{ env.TRIVY_STATUS }}"
          
          if [ $TOTAL_CRITICAL -gt 0 ] || [ $TOTAL_HIGH -gt 0 ]; then
            echo ""
            echo "🚨 DEPLOYMENT BLOCKED: Critical/High vulnerabilities found!"
            echo "🛑 Fix these security issues before proceeding with deployment."
            exit 1
          else
            echo ""
            echo "✅ SECURITY GATE PASSED: Safe to proceed with deployment"
          fi

      # Authenticate to Google Cloud (only if security gates pass)
      - name: Authenticate to Google Cloud
        if: success()
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Set up Cloud SDK
      - name: Set up Cloud SDK
        if: success()
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      # Configure Docker to use gcloud as credential helper
      - name: Configure Docker for Artifact Registry
        if: success()
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      # Push Docker image to Google Artifact Registry (only if security gates pass)
      - name: Push Docker image to Artifact Registry
        if: success()
        run: |
            echo "Pushing Docker image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }}"
            docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }}
            
            # Also tag and push as latest
            docker tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }} \
              ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:latest
            docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:latest

      # Deploy to Cloud Run (only if security gates pass)
      - name: Deploy to Cloud Run
        if: success()
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }} \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --port=3000 \
            --memory=512Mi \
            --cpu=1 \
            --concurrency=80 \
            --max-instances=10 \
            --min-instances=0 \
            --timeout=300 \
            --set-env-vars="NODE_ENV=production" \
            --labels="environment=production,version=${{ env.IMAGE_TAG }},deployed-by=github-actions" \
            --revision-suffix="${{ env.IMAGE_TAG }}" \
            --quiet

      # Get Cloud Run service URL
      - name: Get Service URL
        if: success()
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
          echo "Service deployed at: $SERVICE_URL"

      # Health Check
      - name: Health Check
        if: success()
        run: |
          echo "Performing health check on ${{ env.SERVICE_URL }}"
          
          # Wait for service to be ready
          sleep 30
          
          # Perform health check with retry
          for i in {1..5}; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.SERVICE_URL }} || echo "000")
            
            if [ "$HTTP_CODE" = "200" ]; then
              echo "✅ Health check passed (HTTP $HTTP_CODE)"
              echo "HEALTH_CHECK_STATUS=✅ Healthy" >> $GITHUB_ENV
              break
            else
              echo "⚠️ Health check attempt $i failed (HTTP $HTTP_CODE)"
              if [ $i -eq 5 ]; then
                echo "HEALTH_CHECK_STATUS=❌ Unhealthy" >> $GITHUB_ENV
                echo "❌ Health check failed after 5 attempts"
                exit 1
              fi
              sleep 10
            fi
          done

      # Map to Custom Domain
      - name: Map Custom Domain
        if: success()
        run: |
          gcloud run domain-mappings create \
            --service=${{ env.SERVICE_NAME }} \
            --domain=${{ env.CUSTOM_DOMAIN }} || echo "Domain already mapped, skipping..."


      # Notify via Slack on Success
      - name: Notify via Slack on Success
        if: success()
        uses: slackapi/slack-github-action@v2.1.1 
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK }}
          webhook-type: incoming-webhook
          payload: |
            text: "GCP Deployment successful for commit ${{ github.sha }}"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*🎉 GCP Deployment Successful*"
              - type: "section"
                fields:
                  - type: "mrkdwn"
                    text: "*Commit SHA*: ${{ github.sha }}"
                  - type: "mrkdwn"
                    text: "*Image Tag*: ${{ env.IMAGE_TAG }}"
                  - type: "mrkdwn"
                    text: "*Service URL*: ${{ env.SERVICE_URL }}"
                  - type: "mrkdwn"
                    text: "*Region*: ${{ env.REGION }}"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "<${{ env.SERVICE_URL }}|🚀 Open Application> | <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|View Commit>"
              - type: "divider"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*🔍 Security Scan Results*"
              - type: "section"
                fields:
                  - type: "mrkdwn"
                    text: "*Snyk Dependencies*\n${{ env.SNYK_STATUS }}\nTotal: ${{ env.SNYK_TOTAL }} (Critical: ${{ env.SNYK_CRITICAL }}, High: ${{ env.SNYK_HIGH }}, Medium: ${{ env.SNYK_MEDIUM }}, Low: ${{ env.SNYK_LOW }})"
                  - type: "mrkdwn"
                    text: "*Trivy Container*\n${{ env.TRIVY_STATUS }}\nTotal: ${{ env.TRIVY_TOTAL }} (Critical: ${{ env.TRIVY_CRITICAL }}, High: ${{ env.TRIVY_HIGH }}, Medium: ${{ env.TRIVY_MEDIUM }}, Low: ${{ env.TRIVY_LOW }})"
              - type: "section"
                fields:
                  - type: "mrkdwn"
                    text: "*Health Check*\n${{ env.HEALTH_CHECK_STATUS }}"
                  - type: "mrkdwn"
                    text: "*Traffic*\n100% to new revision"

      # Notify via Slack on Failure
      - name: Notify via Slack on Failure
        if: failure()
        uses: slackapi/slack-github-action@v2.1.1  
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK }}
          webhook-type: incoming-webhook
          payload: |
            text: "GCP Deployment failed for commit ${{ github.sha }}"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*❌ GCP Deployment Failed*"
              - type: "section"
                fields:
                  - type: "mrkdwn"
                    text: "*Commit SHA*: ${{ github.sha }}"
                  - type: "mrkdwn"
                    text: "*Image Tag*: ${{ env.IMAGE_TAG }}"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|View Commit> | <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Logs>"
              - type: "divider"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*🔍 Security Scan Results*"
              - type: "section"
                fields:
                  - type: "mrkdwn"
                    text: "*Snyk Dependencies*\n${{ env.SNYK_STATUS }}\nTotal: ${{ env.SNYK_TOTAL }} (Critical: ${{ env.SNYK_CRITICAL }}, High: ${{ env.SNYK_HIGH }}, Medium: ${{ env.SNYK_MEDIUM }}, Low: ${{ env.SNYK_LOW }})"
                  - type: "mrkdwn"
                    text: "*Trivy Container*\n${{ env.TRIVY_STATUS }}\nTotal: ${{ env.TRIVY_TOTAL }} (Critical: ${{ env.TRIVY_CRITICAL }}, High: ${{ env.TRIVY_HIGH }}, Medium: ${{ env.TRIVY_MEDIUM }}, Low: ${{ env.TRIVY_LOW }})"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "Please check the workflow logs for detailed information. 🔧"

      # Send Security Alert to Slack if Critical/High vulnerabilities found
      - name: Send Security Alert to Slack
        if: always() && (env.SNYK_CRITICAL > 0 || env.SNYK_HIGH > 0 || env.TRIVY_CRITICAL > 0 || env.TRIVY_HIGH > 0)
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK }}
          webhook-type: incoming-webhook
          payload: |
            text: "🚨 SECURITY ALERT: Critical/High vulnerabilities detected!"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*🚨 SECURITY ALERT - GCP DEPLOYMENT BLOCKED*"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "Critical or High severity vulnerabilities detected in commit ${{ github.sha }}"
              - type: "section"
                fields:
                  - type: "mrkdwn"
                    text: "*Snyk (Dependencies)*\nCritical: ${{ env.SNYK_CRITICAL }}\nHigh: ${{ env.SNYK_HIGH }}"
                  - type: "mrkdwn"
                    text: "*Trivy (Container)*\nCritical: ${{ env.TRIVY_CRITICAL }}\nHigh: ${{ env.TRIVY_HIGH }}"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Detailed Scan Results>"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "🛑 *GCP DEPLOYMENT STOPPED:* Pipeline has been blocked due to security vulnerabilities. Please fix these issues before proceeding."